<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-2.0.xsd">

    <changeSet id="201605271744_edit_func_add_table_1.3" author="aisaev" dbms="postgresql">
        <preConditions onFail="MARK_RAN">
            <or>
                <sqlCheck expectedResult="t">
                    select 2 >((select count(1)  FROM information_schema.tables where  table_name = 'databasechangelog' and table_schema =  'liquibase') + (select count(1)  FROM information_schema.tables where  table_name = 'databasechangelog' and table_schema =  'liquibaselsd'));
                </sqlCheck>
                <sqlCheck expectedResult="0">
                    select (select count(1) from liquibaselsd.databasechangelog where id = '201605271744_edit_func_add_table_1.3') + (select count(1) from liquibase.databasechangelog where id = '201605271744_edit_func_add_table_1.3')
                </sqlCheck>
            </or>
        </preConditions>
        <sql splitStatements="false">
     <![CDATA[
     CREATE OR REPLACE FUNCTION audit.add_table(table_name text) RETURNS void
    LANGUAGE plpgsql
    AS $$
  DECLARE
    pk_column_info               RECORD;
    pk_value_to_write_with_types TEXT;
    pk_value_to_write TEXT;
    full_table_name TEXT;
    audit_table_name TEXT;
  BEGIN
    pk_value_to_write_with_types := '';
    pk_value_to_write := '';
    IF (strpos($1, '.') = 0)
        THEN full_table_name := 'public.' || $1;
    ELSE
        full_table_name := $1;
    END IF;
    audit_table_name := replace(replace(full_table_name, '.', '$'), '"', '');

    FOR pk_column_info IN SELECT * from audit.get_primary_keys(full_table_name)
    LOOP
      pk_value_to_write_with_types := pk_value_to_write_with_types || pk_column_info.column_name || ' ' || pk_column_info.type || ',';
      pk_value_to_write := pk_value_to_write || pk_column_info.column_name || ',';

    END LOOP;
    EXECUTE format('CREATE TABLE audit."%s"(
        aud_rec bigserial,
				%s
				type TEXT NOT NULL CHECK (type IN (''I'',''D'',''U'',''T'')),
				delta hstore,
				aud_when timestamp(6),
				aud_who varchar,
				aud_source varchar,
				CONSTRAINT %s_pk PRIMARY KEY (aud_rec));
				CREATE INDEX ON audit.%s(%s);
				CREATE INDEX %s_aud_when_ix ON audit.%s(aud_when);
				CREATE INDEX %s_aud_who_ix ON audit.%s(aud_who);
				CREATE INDEX %s_aud_source_ix ON audit.%s(aud_source);'
    , audit_table_name, pk_value_to_write_with_types, audit_table_name, audit_table_name, substring(pk_value_to_write, 1, length(pk_value_to_write) - 1)
    , audit_table_name, audit_table_name, audit_table_name, audit_table_name, audit_table_name, audit_table_name);
  END;
  $$;]]>
        </sql>
    </changeSet>

</databaseChangeLog>